from datetime import datetime

import database
from states.set_states import Url_input

import parser_wb_page
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils import executor
import sqlite3

import states.set_states
from buttons.keyboard_button import inline_start_kb
from config import TOKEN
from database import db_admin
from database.db_admin import check_user_in_db, add_new_user, add_item_info, add_discount

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db_admin.sql_start()
date = datetime.now().date()
admin = 293427068


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if check_user_in_db(message.from_user.id) == None:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø - –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∏–¥–æ–∫."
                             f"–û—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä - –∞ —è —Å–æ–æ–±—â—É —Ç–µ–±–µ,–∫–æ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è —Å–∫–∏–¥–∫–∞",
                             reply_markup=inline_start_kb,
                             )
        params = (message.from_user.id, message.from_user.first_name, date)
        add_new_user(params)
    else:
        await message.answer(f"{message.from_user.full_name}, –∫–∞–ª–∞–π—Å—ã–Ω –µ—Å—å –∂–∏", reply_markup=inline_start_kb)


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"
@dp.callback_query_handler(text='url_button')
async def send_start_url(callback: CallbackQuery):
    await Url_input.insert_url.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ >>>  ")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î
@dp.message_handler(state=Url_input.insert_url)
async def url_input_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
        if message.text.split("/")[0] != 'https:' and message.text:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ : (https://www.wildberries.ru/catalog/number/detail.aspx")
            await Url_input.insert_url.set()


        else:
            item_info = parser_wb_page.page_parce(message.text)
            params = (message.chat.id, data['url'], item_info[0], item_info[1], item_info[2])
            try:
                add_item_info(params)
                await state.finish()
                await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=inline_start_kb)
            except sqlite3.IntegrityError:
                await message.answer("–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ", reply_markup=inline_start_kb)
                await state.finish()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–æ–≤–∞—Ä—ã "
@dp.callback_query_handler(text='package_button')
async def send_start_package(callback: CallbackQuery):
    if db_admin.check_packages(callback.message.chat.id) == None:
        await callback.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")

    if db_admin.check_packages(callback.message.chat.id) != None:

        package_list = db_admin.check_packages(callback.message.chat.id)
        for package in package_list:
            await callback.message.answer(
                f'{package[0]}.{package[1]}\n ‚Äª‚Äª‚Äª <b>{package[2]} ‚Äª‚Äª‚Äª {package[3]}</b> ‚Äª‚Äª‚Äª <b>   –¶–µ–Ω–∞: {package[4]}</b>',
                parse_mode='html')

        await callback.message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üòé", reply_markup=inline_start_kb)
        await callback.answer()


    else:
        await callback.answer()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query_handler(text='help_button')
async def send_start_help(callback: CallbackQuery):
    await callback.answer(
        text="–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ  /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é",
        show_alert=True
    )


@dp.callback_query_handler(text='delete_button')
async def send_delete_button(callback: CallbackQuery):
    await callback.answer(
        text="–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä ",
        show_alert=True
    )
    package_list = db_admin.check_packages(callback.message.chat.id)
    for package in package_list:
        await callback.message.answer(
            f'{package[0]}.{package[1]}\n ‚Äª‚Äª‚Äª <b>{package[2]} ‚Äª‚Äª‚Äª {package[3]}</b> ‚Äª‚Äª‚Äª <b>   –¶–µ–Ω–∞: {package[4]}</b>',
            parse_mode='html')
    await Url_input.insert_item_id.set()
    await callback.answer()


@dp.callback_query_handler(text='personal_sale_button')
async def personal_sale(callback: CallbackQuery):
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É, –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã",
                          show_alert=True
                          )
    await callback.message.answer("–≤–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É:    ")
    await Url_input.insert_discount.set()





@dp.message_handler(state=Url_input.insert_item_id)
async def url_input_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_to_delete'] = message.text
        database.db_admin.delete_item_from_db(message.text)
        await state.finish()
        await message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", reply_markup=inline_start_kb )

@dp.message_handler(state=Url_input.insert_discount)
async def discount_input_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        discount = message.text
        database.db_admin.add_discount(message.from_user.id,discount)
        await state.finish()
        await message.answer(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {discount}%", reply_markup=inline_start_kb)


@dp.message_handler(commands=['spam'])
async def spam(message):
    if message.from_user.id == admin:
        await bot.send_message(5670943281, '–ü—Ä–∏–≤–µ—Ç')


@dp.message_handler()
async def command_not_found(message: types.Message):
    await message.delete()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
