from datetime import datetime
import parser_wb_page
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils import executor
import sqlite3

import database.db_admin
import states.set_states
from buttons.keyboard_button import inline_start_kb
from config import TOKEN
from database import db_admin
from database.db_admin import check_user_in_db

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db_admin.sql_start()
date = datetime.now().date()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if check_user_in_db(message.from_user.id) == None:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø - –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∏–¥–æ–∫."
                             f"–û—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä - –∞ —è —Å–æ–æ–±—â—É —Ç–µ–±–µ,–∫–æ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è —Å–∫–∏–¥–∫–∞",
                             reply_markup=inline_start_kb,
                             )
        client = message.from_user.id
        name = message.from_user.first_name

        base = sqlite3.connect('database/skidka.db')
        cur = base.cursor()
        sql = """INSERT INTO users (user_id, user_name, connect_date) VALUES(?,?,?)"""
        params = (client, name, date)
        cur.execute(sql, params)
        base.commit()
    else:
        await message.answer(f"{message.from_user.full_name}, –∫–∞–ª–∞–π—Å—ã–Ω –µ—Å—å –∂–∏", reply_markup=inline_start_kb)


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"
@dp.callback_query_handler(text='url_button')
async def send_start_url(callback: CallbackQuery):
    await states.set_states.Url_input.insert_url.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ >>>  ")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î
@dp.message_handler(state=states.set_states.Url_input.insert_url)
async def url_input_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
        if message.text.split("/")[0] != 'https:' and message.text:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ : (https://www.wildberries.ru/catalog/number/detail.aspx")
            await states.set_states.Url_input.insert_url.set()


        else:
            base = sqlite3.connect('database/skidka.db')
            cur = base.cursor()
            sql = """INSERT INTO packages (user_id, package_url, package_name) VALUES(?,?,?)"""
            user_id = message.chat.id
            name_for_db = parser_wb_page.page_parce(message.text)
            params = (user_id, data['url'], name_for_db)
            cur.execute(sql, params)
            base.commit()
            await state.finish()
            await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=inline_start_kb)


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–æ–≤–∞—Ä—ã "
@dp.callback_query_handler(text='package_button')
async def send_start_package(callback: CallbackQuery):
    if db_admin.check_packages(callback.message.chat.id) != None:
        await callback.message.answer("–í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ø–∏–¥–æ—Ä üòé")
        package_list = db_admin.check_packages(callback.message.chat.id)
        for package in package_list:
            await callback.message.answer(f'{package[0]} ---------- {package[1]}')

        await callback.answer()




    else:
        await callback.message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞–º–∏, –ø–∏–¥–æ—Ä!")


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query_handler(text='help_button')
async def sent_start_help(callback: CallbackQuery):
    await callback.answer(
        text="–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞ –≤–≤–µ–¥–∏  /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é, –ø–∏–¥–æ—Ä",
        show_alert=True
    )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
